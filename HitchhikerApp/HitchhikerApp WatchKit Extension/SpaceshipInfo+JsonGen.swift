//
//  SpaceshipInfo+JsonGen.swift
//
//  Auto generated by swift-json-gen on Tue, 18 Aug 2015 18:42:15 GMT
//

import Foundation

extension SpaceshipInfo {
  static func decodeJson(json: AnyObject) -> SpaceshipInfo? {
    let _dict = json as? [String : AnyObject]
    if _dict == nil { return nil }
    let dict = _dict!

    let id_field: AnyObject? = dict["id"]
    if id_field == nil { assertionFailure("field 'id' is missing"); return nil }
    let id_optional: String? = String.decodeJson(id_field!)
    if id_optional == nil { assertionFailure("field 'id' is not String"); return nil }
    let id: String = id_optional!

    let pictureDriver_field: AnyObject? = dict["pictureDriver"]
    if pictureDriver_field == nil { assertionFailure("field 'pictureDriver' is missing"); return nil }
    let pictureDriver_optional: NSURL? = NSURL.decodeJson(pictureDriver_field!)
    if pictureDriver_optional == nil { assertionFailure("field 'pictureDriver' is not NSURL"); return nil }
    let pictureDriver: NSURL = pictureDriver_optional!

    let nameDriver_field: AnyObject? = dict["nameDriver"]
    if nameDriver_field == nil { assertionFailure("field 'nameDriver' is missing"); return nil }
    let nameDriver_optional: String? = String.decodeJson(nameDriver_field!)
    if nameDriver_optional == nil { assertionFailure("field 'nameDriver' is not String"); return nil }
    let nameDriver: String = nameDriver_optional!

    let specie_field: AnyObject? = dict["specie"]
    if specie_field == nil { assertionFailure("field 'specie' is missing"); return nil }
    let specie_optional: String? = String.decodeJson(specie_field!)
    if specie_optional == nil { assertionFailure("field 'specie' is not String"); return nil }
    let specie: String = specie_optional!

    let planet_field: AnyObject? = dict["planet"]
    if planet_field == nil { assertionFailure("field 'planet' is missing"); return nil }
    let planet_optional: String? = String.decodeJson(planet_field!)
    if planet_optional == nil { assertionFailure("field 'planet' is not String"); return nil }
    let planet: String = planet_optional!

    let pictureSpaceShip_field: AnyObject? = dict["pictureSpaceShip"]
    if pictureSpaceShip_field == nil { assertionFailure("field 'pictureSpaceShip' is missing"); return nil }
    let pictureSpaceShip_optional: NSURL? = NSURL.decodeJson(pictureSpaceShip_field!)
    if pictureSpaceShip_optional == nil { assertionFailure("field 'pictureSpaceShip' is not NSURL"); return nil }
    let pictureSpaceShip: NSURL = pictureSpaceShip_optional!

    let typeSpaceShip_field: AnyObject? = dict["typeSpaceShip"]
    if typeSpaceShip_field == nil { assertionFailure("field 'typeSpaceShip' is missing"); return nil }
    let typeSpaceShip_optional: String? = String.decodeJson(typeSpaceShip_field!)
    if typeSpaceShip_optional == nil { assertionFailure("field 'typeSpaceShip' is not String"); return nil }
    let typeSpaceShip: String = typeSpaceShip_optional!

    return SpaceshipInfo(id: id, pictureDriver: pictureDriver, nameDriver: nameDriver, specie: specie, planet: planet, pictureSpaceship: pictureSpaceShip, typeSpaceship: typeSpaceShip)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["id"] = id.encodeJson()
    dict["pictureDriver"] = pictureDriver.encodeJson()
    dict["nameDriver"] = nameDriver.encodeJson()
    dict["specie"] = specie.encodeJson()
    dict["planet"] = planet.encodeJson()
    dict["pictureSpaceship"] = pictureSpaceship.encodeJson()
    dict["typeSpaces+hip"] = typeSpaceship.encodeJson()

    return dict
  }
}
